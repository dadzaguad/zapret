name: Build and Sign Application

on:
  push:
    branches: [ "feature", "main" ]
    tags:
      - "v*"

env:
  CERT_PASSWORD: ${{ secrets.CERT_PASSWORD }}

jobs:
  build-and-sign:
    runs-on: windows-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.x"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip setuptools wheel
          pip install -r requirements.txt
          pip install pyinstaller

      # Создаем самоподписной сертификат
      - name: Create self-signed certificate
        shell: powershell
        run: |
          $cert = New-SelfSignedCertificate `
            -Type CodeSigning `
            -Subject "CN=ZapretApp" `
            -KeyUsage DigitalSignature `
            -FriendlyName "ZapretApp Certificate" `
            -NotAfter (Get-Date).AddYears(1) `
            -CertStoreLocation "Cert:\CurrentUser\My"
          
          Export-PfxCertificate `
            -Cert $cert `
            -FilePath "cert.pfx" `
            -Password (ConvertTo-SecureString -String "$env:CERT_PASSWORD" -Force -AsPlainText)
          
          # Устанавливаем сертификат в доверенные (для тестов)
          Import-PfxCertificate `
            -FilePath "cert.pfx" `
            -CertStoreLocation "Cert:\CurrentUser\Root" `
            -Password (ConvertTo-SecureString -String "$env:CERT_PASSWORD" -Force -AsPlainText)

      - name: Build with PyInstaller
        run: |
          pyinstaller --onefile --noconsole `
            --paths=src `
            --add-data "src/scripts/bin;src/scripts/bin" `
            --add-data "src/scripts/*.txt;src/scripts" `
            --add-data "src/scripts/commands.json;src/scripts" `
            --add-data "icon.ico;." `
            --icon=icon.ico main.py

      # Подписываем EXE-файл
      - name: Sign executable
        shell: powershell
        run: |
          $signtool = "C:\Program Files (x86)\Windows Kits\10\bin\10.0.22621.0\x64\signtool.exe"
          & "$signtool" sign `
            /f "cert.pfx" `
            /p "$env:CERT_PASSWORD" `
            /fd SHA256 `
            /tr "http://timestamp.digicert.com" `
            /td SHA256 `
            /v "dist\main.exe"
          
          # Проверяем подпись
          & "$signtool" verify /pa /v "dist\main.exe"

      - name: Prepare artifact
        run: |
          mkdir -p dist-artifacts
          mv dist/main.exe dist-artifacts/
          ls -R dist-artifacts

      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: signed-application
          path: dist-artifacts/main.exe

  release:
    needs: build-and-sign
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')

    steps:
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: signed-application

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: main.exe
          tag_name: ${{ github.ref }}
          name: Release ${{ github.ref_name }}
          body: "Signed executable with self-signed certificate"
        env:
          GITHUB_TOKEN: ${{ secrets.PAT_TOKEN }}